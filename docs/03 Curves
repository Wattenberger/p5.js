# Curves

This short tutorial introduces you to the three types of curves in p5.js: arcs, spline curves, and Bézier curves.

## Arcs

Arcs are the simplest curves to draw, it is defined an arc as a section of an ellipse. You call the function with these parameters:

`arc (x, y, w, h, start, stop, [mode])`

The first four parameters (x,y,w,h) define the boundary box for your arc and the next two (start, stop), are the start and stop angles for the arc. These angles are given in radians and are measured clockwise with zero degrees pointing east and PI radians equals 180°.

```
function draw() {
    createCanvas(150,200);
    background(150);
    stroke(0);
    arc(35, 35, 50, 50, 0, PI / 2.0); // lower quarter circle
    arc(105, 35, 50, 50, -PI, 0, CHORD);  // upper half of circle
    arc(175, 35, 50, 50, -PI / 6, PI / 6, PIE); // 60 degrees
    noFill();
    arc(105, 105, 100, 50, PI / 2, 3 * PI / 2, OPEN); // 180 degrees
}
```
---

## Spline Curves

Arcs are fine, but they’re plain. The next function, curve(), lets you draw curves that aren’t necessarily part of an arc. This function draws what is technically called a Rom-Catmull Spline. To draw the curve, you must specify the (x, y) coordinates of the points where the curve starts and ends. You must also specify two control points which determine the direction and amount of curvature. The first two and last two parameters are the control points of the curve. A call to curve() uses these parameters:

`curve (cpx1, cpy1, x1, y1, x2, y2, cpx2, cpy2);`

## How do the control points affect the way the curve looks?

The tangent to the curve at the start point is parallel to the line between control point one and the end of the curve. The tangent to the curve at the end point is parallel to the line between the start point and control point 2. The following diagram shows a curve and the points can be dragged to show how the control point affects the curve:

<iframe src="https://p5js.org/assets/learn/curves/curve_ex/embed.html" width="400" height="400"></iframe>

## Continuous Spline Curves

In isolation, a single curve() is not particularly appealing. To draw a continuous curve through several points, you are better off using the curveVertex() function. You can only use this function when you are creating a shape with the beginShape() and endShape() functions.In common usage, people use the first point of the curve as the first control point and the last point of the curve as the last control point.

```
let coords = [40, 40, 80, 60, 100, 100, 60, 120, 50, 150];

function setup() {
    createCanvas(150, 200);
}

function draw() {
    background(255);
    noFill();
    stroke(0);
    beginShape();
    curveVertex(40,40);
    curveVertex(40,40);
    curveVertex(80,60);
    curveVertex(100,100);
    curveVertex(60,120);
    curveVertex(50,150);
    curveVertex(50,150);
    endShape();

    for (let i = 0; i < coords.length; i+= 2) {
        ellipse(coords[i], coords[i+1], 10, 10);
    }
}
```
---

## Bézier Curves

Though better than arcs, spline curves don’t seem to have those graceful, swooping curves that say “art.” For those, you need to draw Bézier curves with the bezier() function. As with spline curves, the bezier() function has eight parameters, but the order is different. The first two and last two parameters are the start and end points while middle four points are the control points.

`bezier(x1, y1, cpx1, cpy1, cpx2, cpy2, x2, y2);`

<iframe src="https://p5js.org/assets/learn/curves/bezier/embed.html" width="400" height="400"></iframe>

While it is difficult to visualize how the control points affect a curve(), it is slightly easier to see how the control points affect Bézier curves. Imagine two poles and several rubber bands. The poles connect the control points to the endpoints of the curve. A rubber band connects the tops of the poles. Two more rubber bands connect the midpoints of the poles to the midpoint of the first rubber band. One more rubber band connects their midpoints. The center of that last rubber band is tied to the curve. This diagram helps to explain, the points can be moved to change the curve.

![](https://p5js.org/assets/learn/curves/bezier_with_lines/bezier_with_lines.png)

## Continuous Bézier Curves

Just as curveVertex() allows you to make continuous spline curves, bezierVertex() lets you make continuous Bézier curves. Again, you must be within a beginShape() / endShape() sequence. You must use vertex(startX, startY) to specify the starting anchor point of the curve. Subsequent points are specified with a call to:

bezierVertex(cpx1, cpy1, cpx2, cpy2, x, y);

Here is a continuous Bézier curve, but it doesn’t join smoothly. In order to make two curves A and B smoothly continuous, the last control point of A, the last point of A, and the first control point of B have to be on a straight line.

```
function setup() {
    createCanvas(150,200);
}

function draw() {
    background(255);
    noFill();
    stroke(0);
    beginShape();
    vertex(30, 70); // first point
    bezierVertex(25, 25, 100, 50, 50, 100);
    bezierVertex(50, 140, 75, 140, 120, 120); // if first 2 numbers are changed to 20, 130 it becomes continuous
    endShape();

    ellipse(25, 25, 5, 5);
    ellipse(100, 50, 5, 5);
    ellipse(50, 140, 5, 5);//change to (20, 130, 5, 5) to reflect control point
    ellipse(75, 140, 5, 5);
}
```
---

## Summary

- Use arc() when you need a segment of a circle or an ellipse. You can’t make continuous arcs or use them as part of a shape.

- Use curve() when you need a small curve between two points. Use curveVertex() to make a continuous series of curves as part of a shape.

- Use bezier() when you need long, smooth curves. Use bezierVertex() to make a continuous series of Bézier curves as part of a shape.

> This tutorial is written by J David Eisenberg and ported by Sally Chen. If you see any errors or have comments, please let us know. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlinke 4.0 International License.